use std::str::FromStr;
use crate::lexer;
use crate::lexer::*;
use crate::interner::*;
use std::borrow::Borrow;
use std::collections::VecDeque;
use crate::parse_tree::*;
use std::rc::Rc;
use std::cell::RefCell;
grammar<'input>(
    src: &'input str, 
    str_interner: &mut Interner<String>, 
    byte_interner: &mut Interner<Box<[u8]>>,
    typedef_environment: &mut Rc<RefCell<TypeDefEnv>>);

Tagged<E>: TaggedExpr =
    <l: @L> <rule: E> <r: @R> =>
        TaggedExpr::new(rule, l, r);

env_push: () = {
    => {
        (*typedef_environment.borrow_mut()).ids.push_frame();
    },
};

env_pop: () = {
    => {
        (*typedef_environment.borrow_mut()).ids.pop_frame();
    },
};

pub primary_expression_inner: Expr = {
    id => Expr::Id(<>),
    "int literal" => Expr::IntConst(<>.0, <>.1),
    "float literal" => Expr::FloatConst(<>.0, <>.1),
    "string literal" => Expr::StringConst(byte_interner.intern(&<>)),
    "(" <e:expression_inner> ")" => e
};
primary_expression: TaggedExpr = Tagged<primary_expression_inner>;

id: IValue<String> ={
    "id" => str_interner.intern::<str>(<>),
};
type_id: IValue<String> = {
    "type name" => str_interner.intern::<str>(<>),
}

postfix_expression_inner: Expr = {
    primary_expression_inner => <>,
    <base:postfix_expression> "[" <offset:expression> "]" => Expr::Index { base, offset, },
    <fun:postfix_expression> "(" ")" => Expr::Call { fun, args: vec![].into_boxed_slice(), },
    <fun:postfix_expression> "(" <args:argument_expression_list> ")" => Expr::Call { fun, args, },
    <expr:postfix_expression> "." <id:id> => Expr::Dot { expr, field: id },
    <expr:postfix_expression> "->" <id:id> => Expr::Arrow { expr, field: id },
    <expr:postfix_expression> "++" => Expr::UnaryOp { expr, unop: UnaryOp::IncPost },
    <expr:postfix_expression> "--" => Expr::UnaryOp { expr, unop: UnaryOp::DecPost },
};
postfix_expression: TaggedExpr = Tagged<postfix_expression_inner>;

argument_expression_list_inner: VecDeque<TaggedExpr> = {
    <expr:assignment_expression> => {
        let mut v = VecDeque::new();
        v.push_front(expr);
        v
    },
    <expr:assignment_expression> "," <tail:argument_expression_list_inner> => {
        let mut tail = tail;
        tail.push_front(expr);
        tail
    }
};

argument_expression_list: Box<[TaggedExpr]> =
    argument_expression_list_inner => <Vec<_> as From<VecDeque<TaggedExpr>>>::from(<>).into_boxed_slice();

unary_expression_inner: Expr = {
    <expr:postfix_expression_inner> => expr,
    "++" <expr:unary_expression> => Expr::UnaryOp { expr, unop: UnaryOp::IncPre, },
    "--" <expr:unary_expression> => Expr::UnaryOp { expr, unop: UnaryOp::DecPre, },
    <unop:unary_operator> <expr:cast_expression> => Expr::UnaryOp { expr, unop, },
    "sizeof" <expr:unary_expression> => Expr::Sizeof { expr, },
    "sizeof" "(" <ty:type_name> ")" => Expr::SizeofType { ty, },
};
unary_expression: TaggedExpr = Tagged<unary_expression_inner>;

unary_operator: UnaryOp = {
    "&" => UnaryOp::Lea,
    "*" => UnaryOp::Deref,
    "+" => UnaryOp::Pos,
    "-" => UnaryOp::Neg,
    "~" => UnaryOp::BitNeg,
    "!" => UnaryOp::Not,
};

cast_expression_inner: Expr = {
    unary_expression_inner => <>,
    "(" <ty:type_name> ")" <expr:cast_expression> => Expr::Cast { ty, expr, },
};
cast_expression: TaggedExpr = Tagged<cast_expression_inner>;

mult_expression_inner: Expr = {
    cast_expression_inner => <>,
    <lhs:mult_expression> "*" <rhs:cast_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Mul, },
    <lhs:mult_expression> "/" <rhs:cast_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Div, },
    <lhs:mult_expression> "%" <rhs:cast_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Mod, },
};
mult_expression: TaggedExpr = Tagged<mult_expression_inner>;

add_expression_inner: Expr = {
    mult_expression_inner => <>,
    <lhs:add_expression> "+" <rhs:mult_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Add, },
    <lhs:add_expression> "-" <rhs:mult_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Sub, },
};
add_expression: TaggedExpr = Tagged<add_expression_inner>;

shift_expression_inner: Expr = {
    add_expression_inner => <>,
    <lhs: shift_expression> "<<" <rhs: add_expression> => Expr::BinOp { lhs, rhs, op: BinOp::LShift },
    <lhs: shift_expression> ">>" <rhs: add_expression> => Expr::BinOp { lhs, rhs, op: BinOp::RShift }
};
shift_expression: TaggedExpr = Tagged<shift_expression_inner>;

relational_expression_inner: Expr = {
    shift_expression_inner => <>,
    <lhs: relational_expression> "<" <rhs: shift_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Lt },
    <lhs: relational_expression> ">" <rhs: shift_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Gt },
    <lhs: relational_expression> "<=" <rhs: shift_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Lte },
    <lhs: relational_expression> ">=" <rhs: shift_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Gte },
};
relational_expression: TaggedExpr = Tagged<relational_expression_inner>;

eq_expression_inner: Expr = {
    relational_expression_inner => <>,
    <lhs: eq_expression> "==" <rhs: relational_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Eq, },
    <lhs: eq_expression> "!=" <rhs: relational_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Neq, },
};
eq_expression: TaggedExpr = Tagged<eq_expression_inner>;

and_expression_inner: Expr = {
    eq_expression_inner => <>,
    <lhs: and_expression> "&" <rhs:eq_expression> => Expr::BinOp { lhs, rhs, op: BinOp::BAnd, },
};
and_expression: TaggedExpr = Tagged<and_expression_inner>;

xor_expression_inner: Expr = {
    and_expression_inner => <>,
    <lhs: xor_expression> "^" <rhs:and_expression> => Expr::BinOp { lhs, rhs, op: BinOp::Xor, },
};
xor_expression: TaggedExpr = Tagged<xor_expression_inner>;

or_expression_inner: Expr = {
    xor_expression_inner => <>,
    <lhs: or_expression> "|" <rhs:xor_expression> => Expr::BinOp { lhs, rhs, op: BinOp::BOr, },
};
or_expression: TaggedExpr = Tagged<or_expression_inner>;

land_expression_inner: Expr = {
    or_expression_inner => <>,
    <lhs: land_expression> "&&" <rhs:or_expression> => Expr::BinOp { lhs, rhs, op: BinOp::LAnd, },
};
land_expression: TaggedExpr = Tagged<land_expression_inner>;

lor_expression_inner: Expr = {
    land_expression_inner => <>,
    <lhs: lor_expression> "||" <rhs:land_expression> => Expr::BinOp { lhs, rhs, op: BinOp::LOr, },
};
lor_expression: TaggedExpr = Tagged<lor_expression_inner>;

ternary_expression_inner: Expr = {
    <cond:lor_expression> "?" <tval:expression> ":" <fval:ternary_expression> =>
        Expr::Ternary { cond, tval, fval, },
    lor_expression_inner => <>,
};
ternary_expression: TaggedExpr = Tagged<ternary_expression_inner>;

assignment_expression_inner: Expr = {
    ternary_expression_inner => <>,
    <lhs:unary_expression> <op:assignment_operator> <rhs:assignment_expression> =>
        Expr::BinOp { lhs, rhs, op, }
};
assignment_expression: TaggedExpr = Tagged<assignment_expression_inner>;

assignment_operator: BinOp = {
    "*=" => BinOp::MulAssign,
    "/=" => BinOp::DivAssign,
    "%=" => BinOp::ModAssign,
    "+=" => BinOp::AddAssign,
    "-=" => BinOp::SubAssign,
    "<<=" => BinOp::LshAssign,
    ">>=" => BinOp::RshAssign,
    "&=" => BinOp::AndAssign,
    "^=" => BinOp::XorAssign,
    "|=" => BinOp::OrAssign,
    "=" => BinOp::Assign,
};

expression_inner: Expr = {
    <argument_expression_list_inner> => {
        if <>.len() == 1 {
            let mut x = <>;
            *x.pop_front().unwrap().expr
        } else {
            let exprs = <Vec<_> as From<VecDeque<TaggedExpr>>>::from(<>).into_boxed_slice();
            Expr::Comma { exprs, }
        }
    }
};
expression: TaggedExpr = Tagged<expression_inner>;

qual_list: TySpecQualList = {
    <qual:type_qualifier> <l:qual_list> => {
        let mut l = l;
        l.add_qual(qual)
    },
    <qual:type_qualifier> => {
        let mut l = TySpecQualList::new();
        l.add_qual(qual)
    }
};

// Only contains a single name
named_spec_qual_list: TySpecQualList = {
    <l:qual_list> <id:type_id> <r:qual_list> => {
        TySpecQualList::merge(l.add_spec(TySpec::Named(id)), r)
    },
    <l:qual_list> <id:type_id> => {
        l.add_spec(TySpec::Named(id))
    },
    <id:id> <r:qual_list> => {
        r.add_spec(TySpec::Named(id))
    }
};

spec_qual_list_inner: TySpecQualList = {
    <spec:type_specifier> <l:spec_qual_list_inner> => {
        let mut l = l;
        l.add_spec(spec)
    },
    <spec:type_specifier> => {
        let mut l = TySpecQualList::new();
        l.add_spec(spec)
    },
    <qual:type_qualifier> <l:spec_qual_list_inner> => {
        let mut l = l;
        l.add_qual(qual)
    },
    <qual:type_qualifier> => {
        let mut l = TySpecQualList::new();
        l.add_qual(qual)
    },
};

spec_qual_list: TySpecQualList = {
    spec_qual_list_inner => <>,
    named_spec_qual_list => <>
}

ptr_inner: i32 = {
    "*" => 0,
    "*" <quals:type_qualifier_list> => quals,
};

pointer: PtrTy =
    <ps:ptr_inner+> => PtrTy(ps);

abstract_declarator: AbsDecl = {
    pointer => AbsDecl::Ptr(<>),
    direct_abstract_declarator => AbsDecl::Direct(<>),
    <p:pointer> <d:direct_abstract_declarator> => AbsDecl::PtrTo(p, d),
};

direct_abstract_declarator: DirAbsDecl = {
    "(" <ad:abstract_declarator> ")" => 
        DirAbsDecl::AbsDecl(Box::new(ad)),
    "[" "]" => 
        DirAbsDecl::Array(None, None),
    "[" <expr:ternary_expression> "]" => 
        DirAbsDecl::Array(None, Some(expr)),
    <d:direct_abstract_declarator> "[" "]" =>
        DirAbsDecl::Array(Some(Box::new(d)), None),
    <d:direct_abstract_declarator> "[" <expr:ternary_expression> "]" =>
        DirAbsDecl::Array(Some(Box::new(d)), Some(expr)),
    <d:direct_abstract_declarator> "(" <params:parameter_type_list> ")" => 
        DirAbsDecl::Fn(Box::new(d), params),
};

parameter_type_list_inner: VecDeque<Ty> = {
    <ty:type_name> => { 
        let mut x = VecDeque::new();
        x.push_front(ty);
        x
    },
    <ty:type_name> "," <tail:parameter_type_list_inner> => {
        let mut x = tail;
        x.push_front(ty);
        x
    }
};

type_qualifier_list: i32 = {
    <q:type_qualifier> => q as i32,
    <l:type_qualifier_list> <q:type_qualifier> => l as i32 | q as i32,
};

type_qualifier: TyQual = {
    "volatile" => TyQual::Volatile,
    "const" => TyQual::Const,
};

type_specifier: TySpec = {
    "unsigned" => TySpec::Unsigned,
    "signed" => TySpec::Signed,
    "long" => TySpec::Long,
    "int" => TySpec::Int,
    "void" => TySpec::Void,
    "char" => TySpec::Char,
    "short" => TySpec::Short,
    "float" => TySpec::Float,
    "double" => TySpec::Double,
    struct_or_union_specifier => TySpec::Structure(<>),
    enum_specifier => TySpec::Enumeration(<>),
};

type_name: Ty = {
    <sqs:spec_qual_list> => sqs.into_type(),
    <sqs:spec_qual_list> <ad:abstract_declarator> => ad.wrap_type(sqs.into_type()),
};

pub type_name_program: Ty = {
    <sqs:spec_qual_list> "eof" => sqs.into_type(),
    <sqs:spec_qual_list> <ad:abstract_declarator> "eof" => ad.wrap_type(sqs.into_type()), 

};

struct_or_union_specifier: Structure = {
    <s:struct_or_union> <id:id> "{" <decls:struct_declaration_list> "}" =>
        Structure::new(s, Some(id), decls),
    <s:struct_or_union> "{" <decls:struct_declaration_list> "}" =>
        Structure::new(s, None, decls),
    <s:struct_or_union> <id:id?> "{" "}" =>
        Structure::new(s, id, Box::new([])),
    <s:struct_or_union> <id:id> =>
        Structure::new(s, Some(id), Box::new([])),
};

struct_or_union: StructureType = {
    "struct" => StructureType::Struct,
    "union" => StructureType::Union,
};

struct_declaration_list_inner: VecDeque<StructDeclaration> = {
    struct_declaration => {
        let mut decls = VecDeque::new();
        decls.push_front(<>);
        decls
    },
    <d:struct_declaration> <decls:struct_declaration_list_inner> => {
        let mut decls = decls;
        decls.push_front(d);
        decls
    }
};

struct_declaration_list: Box<[StructDeclaration]> = {
    struct_declaration_list_inner => <Vec<_> as From<VecDeque<_>>>::from(<>).into_boxed_slice()
};

struct_declaration: StructDeclaration = {
    <sql:spec_qual_list> <sdl:struct_declarator_list> ";" => {
        let mut sql = sql;
        StructDeclaration::new(sql.get_type(), sdl)
    },
};

struct_declarator_list_inner: VecDeque<StructDeclarator> = {
    struct_declarator => {
        let mut decls = VecDeque::new();
        decls.push_front(<>);
        decls
    },
    <d:struct_declarator> "," <decls:struct_declarator_list_inner> => {
        let mut decls = decls;
        decls.push_front(d);
        decls
    }
};
struct_declarator_list: Box<[StructDeclarator]> = {
    struct_declarator_list_inner => <Vec<_> as From<VecDeque<_>>>::from(<>).into_boxed_slice() 
};

struct_declarator: StructDeclarator = {
    declarator => StructDeclarator::Declarator(<>),
    ":" <e:ternary_expression> => StructDeclarator::BitField(None, e),
    <d:declarator> ":" <e:ternary_expression> => StructDeclarator::BitField(Some(d), e),
};

enum_specifier: Enumeration = {
    "enum" "{" <e:enumerator_list> "}" =>
        Enumeration::new(None, e),
    "enum" <id:id> "{" <e:enumerator_list> "}" =>
        Enumeration::new(Some(id), e),
    "enum" <id:id> =>
        Enumeration::new(Some(id), Box::new([])),
};

enumerator_list_inner: VecDeque<Enumerator> = {
    enumerator => {
        let mut e = VecDeque::new();
        e.push_front(<>);
        e
    },
    <e:enumerator> "," <es:enumerator_list_inner> => {
        let mut es = es;
        es.push_front(e);
        es
    },
};
enumerator_list: Box<[Enumerator]> = {
    enumerator_list_inner => <Vec<_> as From<VecDeque<_>>>::from(<>).into_boxed_slice() 
};

enumerator: Enumerator = {
    id => Enumerator::new(<>, None),
    <id:id> "=" <exp:ternary_expression> => Enumerator::new(id, Some(exp)),
};

declarator: Declarator = {
    direct_declarator => Declarator::new(DeclaratorKind::Direct(<>)),
    <p:pointer> <d:direct_declarator> => Declarator::new(DeclaratorKind::PtrTo(p, d)),
};

direct_declarator: DirDecl = {
    id => DirDecl::Id(<>),
    "(" <ad:declarator> ")" =>
        DirDecl::Declarator(Box::new(ad)),
    <d:direct_declarator> "[" "]" =>
        DirDecl::Array(Box::new(d), None),
    <d:direct_declarator> "[" <expr:ternary_expression> "]" =>
        DirDecl::Array(Box::new(d), Some(expr)),
    <d:direct_declarator> "(" <params:parameter_type_list> ")" => 
        DirDecl::Fn(Box::new(d), params),
    <d:direct_declarator> "(" ")" => 
        DirDecl::Fn(Box::new(d), ParamList::empty()),
    // <d:direct_declarator> "(" <params:identifier_list> ")" => 
    //    DirDecl::Fn(Box::new(d), params),
};

parameter_type_list: ParamList = {
    parameter_list => <>
};

identifier_list_inner: VecDeque<NamedParam> = {
    id => {
        let mut v = VecDeque::new();
        let i = NamedParam::from_id(<>);
        v.push_front(i);
        v
    },
    <id:id> "," <tail:identifier_list_inner> => {
        let mut tail = tail;
        let i = NamedParam::from_id(id);
        tail.push_front(i);
        tail
    },
};
identifier_list: ParamList = {
    identifier_list_inner => {
        let kind = ParamListKind::Named(<Vec<_> as From<VecDeque<_>>>::from(<>).into_boxed_slice());
        let varargs = false;
        ParamList::new(kind, varargs)
    },
};

parameter_list_inner: (bool, VecDeque<TypedParam>) = {
    parameter_declaration => {
        let mut v = VecDeque::new();
        v.push_front(<>);
        (false, v)
    },
    <p:parameter_declaration> "," <tail:parameter_list_inner> => {
        let mut t = tail.1;
        t.push_front(p);
        (tail.0, t)
    },
    "..." => (true, VecDeque::new()),
};
parameter_list: ParamList = {
    parameter_list_inner => {
        let kind = ParamListKind::Typed(<Vec<_> as From<VecDeque<_>>>::from(<>.1).into_boxed_slice());
        ParamList::new(kind, <>.0)
    }
};
parameter_declaration: TypedParam = {
    <spec:declaration_specifiers> <d:declarator> =>
        TypedParam::from_decl(spec, d),
    <spec:declaration_specifiers> <ad:abstract_declarator> =>
        TypedParam::from_abs_decl(spec, ad),
    <spec:declaration_specifiers> =>
        TypedParam::from_spec(spec),
};

initializer: Initializer = {
    assignment_expression => Initializer::Expr(<>),
    "{" <il:initializer_list> "}" => Initializer::Structure(il),
};

init_declarator: InitDeclarator = {
    declarator => InitDeclarator::new(<>, None),
    <d:declarator> "=" <i:initializer> => InitDeclarator::new(d, Some(i)),
};

init_declarator_list_inner: VecDeque<InitDeclarator> = {
    init_declarator => {
        let mut v = VecDeque::new();
        v.push_front(<>);
        v
    },
    <p:init_declarator> "," <tail:init_declarator_list_inner> => {
        let mut t = tail;
        t.push_front(p);
        t
    },
};
init_declarator_list: Box<[InitDeclarator]> = {
    init_declarator_list_inner => <Vec<_> as From<VecDeque<_>>>::from(<>).into_boxed_slice()
};

initializer_list_inner: VecDeque<Initializer> = {
    <i:initializer> "," => {
        let mut v = VecDeque::new();
        v.push_front(i);
        v
    },
    initializer => {
        let mut v = VecDeque::new();
        v.push_front(<>);
        v
    },
    <p:initializer> "," <tail:initializer_list_inner> => {
        let mut t = tail;
        t.push_front(p);
        t
    },
};
initializer_list: Box<[Initializer]> = {
    initializer_list_inner => <Vec<_> as From<VecDeque<_>>>::from(<>).into_boxed_slice()
};

end_td: () = {
    => {
        typedef_environment.end_decl();
    },
};

declaration: Declaration = {
    <d:declaration_specifiers_td> <x:end_td> ";" =>
        Declaration::from_spec(d, Box::new([])),
    <spec:declaration_specifiers_td> <decls:init_declarator_list> <x:end_td> ";" =>
        Declaration::from_spec(spec, decls),
};

declaration_list_inner: VecDeque<Declaration> = {
    declaration => {
        let mut v = VecDeque::new();
        v.push_front(<>);
        v
    },
    <p:declaration> <tail:declaration_list_inner> => {
        let mut t = tail;
        t.push_front(p);
        t
    },
};
declaration_list: Box<[Declaration]> = {
    declaration_list_inner => <Vec<_> as From<VecDeque<_>>>::from(<>).into_boxed_slice()
};

statement_list_inner: VecDeque<Statement> = {
    statement => {
        let mut v = VecDeque::new();
        v.push_front(<>);
        v
    },
    <p:statement> "," <tail:statement_list_inner> => {
        let mut t = tail;
        t.push_front(p);
        t
    },
};
statement_list: Box<[Statement]> = {
    statement_list_inner => <Vec<_> as From<VecDeque<_>>>::from(<>).into_boxed_slice()
};

expression_statement: Statement = {
    ";" => Statement::Nop,
    <e:expression> ";" => Statement::Expr(e),
};

for_expression_statement: TaggedExpr = {
    <l: @L> ";" <r: @R> => TaggedExpr::new(Expr::IntConst(1, IntType::Long), l, r),
    <x:expression> ";" => x,
};

statement: Statement = {
    open_statement => <>,
    closed_statement => <>,
};

open_statement: Statement = {
    "if" "(" <e:expression> ")" <s:other_statement> =>
        Statement::If(e, Box::new(s), None),
    "if" "(" <e:expression> ")" <s:open_statement> =>
        Statement::If(e, Box::new(s), None),
    "if" "(" <e:expression> ")" <true_branch:closed_statement> "else" <false_branch:open_statement> =>
        Statement::If(e, Box::new(true_branch), Some(Box::new(false_branch))),
};

closed_statement: Statement = {
    "if" "(" <e:expression> ")" <true_branch:closed_statement> "else" <false_branch:closed_statement> =>
        Statement::If(e, Box::new(true_branch), Some(Box::new(false_branch))),
    other_statement => <>,
};

other_statement: Statement = {
    labeled_statement => <>,
    compound_statement => <>,
    expression_statement => <>,
    switch_statement => <>,
    iteration_statement => <>,
    jump_statement => <>,
};

switch_statement: Statement = {
    "switch" "(" <e:expression> ")" <s:closed_statement> =>
        Statement::Switch(e, Box::new(s)),
};

iteration_statement: Statement = {
    "while" "(" <e:expression> ")" <s:closed_statement> =>
        Statement::While(e, Box::new(s)),
    "do" <s:statement> "while" "(" <e:expression> ")" ";" =>
        Statement::DoWhile(Box::new(s), e),
    "for" "(" <init:for_expression_statement> <cond:for_expression_statement> ")" <s:closed_statement> =>
        Statement::For { init, cond, inc: None, body: Box::new(s) },
    "for" "(" <init:for_expression_statement> <cond:for_expression_statement> <inc:expression> ")" <s:closed_statement> =>
        Statement::For { init, cond, inc: Some(inc), body: Box::new(s) },
};

jump_statement: Statement = {
    "goto" <id:id> ";" => Statement::Goto(<>),
    "continue" ";" => Statement::Continue,
    "break" ";" => Statement::Break,
    "return" ";" => Statement::Return(None),
    "return" <e:expression> ";" => Statement::Return(Some(e)),
};

labeled_statement: Statement = {
    <id:id> ":" <s:closed_statement> =>
        Statement::Labeled(id, Box::new(s)),
    "case" <exp:ternary_expression> ":" <s:closed_statement> => 
        Statement::Case(exp, Box::new(s)),
    "default" ":" <s:closed_statement> => 
        Statement::Default,
};

compound_statement_inner: Box<[DeclOrStmnt]> = {
    "{" "}" => Box::new([]),
    "{" <x:declaration_statement_list> "}" => x,
};
compound_statement: Statement = {
    compound_statement_inner => Statement::Compound(<>)
};

declaration_statement: DeclOrStmnt = {
    declaration => DeclOrStmnt::Decl(<>),
    statement => DeclOrStmnt::Stmnt(<>),
};
declaration_statement_list_inner: VecDeque<DeclOrStmnt> = {
    declaration_statement => {
        let mut v = VecDeque::new();
        v.push_front(<>);
        v
    },
    <p:declaration_statement> "," <tail:declaration_statement_list_inner> => {
        let mut t = tail;
        t.push_front(p);
        t
    },
};
declaration_statement_list: Box<[DeclOrStmnt]> = {
    declaration_statement_list_inner => <Vec<_> as From<VecDeque<_>>>::from(<>).into_boxed_slice()
};
translation_unit_inner: VecDeque<TranslationUnit> = {
    external_declaration => {
        let mut v = VecDeque::new();
        v.push_front(<>);
        v
    },
    <p:external_declaration> <tail:translation_unit_inner> => {
        let mut t = tail;
        t.push_front(p);
        t
    },
};
translation_unit: Box<[TranslationUnit]> = {
    translation_unit_inner => <Vec<_> as From<VecDeque<_>>>::from(<>).into_boxed_slice()
};
pub translation_unit_program: Box<[TranslationUnit]> = {
    <i:translation_unit_inner> "eof" => <Vec<_> as From<VecDeque<_>>>::from(i).into_boxed_slice()
};
external_declaration: TranslationUnit = {
    function_definition => TranslationUnit::Fn(<>),
    declaration => TranslationUnit::Decl(<>),
};

function_definition: Function = {
    <s:declaration_specifiers> <dec:declarator> <ts:declaration_list> <body:compound_statement_inner> =>
        Function::new(s, dec, ts, body),
    <s:declaration_specifiers> <dec:declarator> <body:compound_statement_inner> =>
        Function::new(s, dec, Box::new([]), body),
    <dec:declarator> <ts:declaration_list> <body:compound_statement_inner> =>
        Function::new(DeclSpec::new(), dec, ts, body),
    <dec:declarator> <body:compound_statement_inner> =>
        Function::new(DeclSpec::new(), dec, Box::new([]), body),
};

storage_class_specifier: StorageClassSpec = {
    "register" => StorageClassSpec::Register,
    "typedef" => StorageClassSpec::Typedef,
    "extern" => StorageClassSpec::Extern,
    "static" => StorageClassSpec::Static,
    "auto" => StorageClassSpec::Auto,
};

declaration_specifiers: DeclSpec = {
    storage_class_specifier =>
        DeclSpec::new().add_storage_class_spec(<>),
    <s:storage_class_specifier> <ds:declaration_specifiers> => 
        ds.add_storage_class_spec(s),
    type_specifier =>
        DeclSpec::new().add_type_spec(<>),
    <t:type_specifier> <ds:declaration_specifiers> => 
        ds.add_type_spec(t), 
    type_qualifier => 
        DeclSpec::new().add_type_qual(<>),
    <q:type_qualifier> <ds:declaration_specifiers> => 
        ds.add_type_qual(q),
};

// Use this for normal variable declarations
// It is needed to properly discern between type names and variable names.
declaration_specifiers_td: DeclSpec = {
    declaration_specifiers => {
        typedef_environment.start_decl(<>);
        <>
    }
}

extern {
    type Location = usize;
    type Error = lexer::LexError;

    enum lexer::Tok<'input> {
        "auto" => Tok::KWAuto,
        "break" => Tok::KWBreak,
        "const" => Tok::KWConst,
        "case" => Tok::KWCase,
        "char" => Tok::KWChar,
        "continue" => Tok::KWContinue,
        "default" => Tok::KWDefault,
        "do" => Tok::KWDo,
        "double" => Tok::KWDouble,
        "else" => Tok::KWElse,
        "enum" => Tok::KWEnum,
        "extern" => Tok::KWExtern,
        "float" => Tok::KWFloat,
        "for" => Tok::KWFor,
        "goto" => Tok::KWGoto,
        "if" => Tok::KWIf,
        "int" => Tok::KWInt,
        "long" => Tok::KWLong,
        "register" => Tok::KWRegister,
        "return" => Tok::KWReturn,
        "short" => Tok::KWShort,
        "signed" => Tok::KWSigned,
        "sizeof" => Tok::KWSizeof,
        "static" => Tok::KWStatic,
        "struct" => Tok::KWStruct,
        "switch" => Tok::KWSwitch,
        "typedef" => Tok::KWTypedef,
        "union" => Tok::KWUnion,
        "unsigned" => Tok::KWUnsigned,
        "void" => Tok::KWVoid,
        "volatile" => Tok::KWVolatile,
        "while" => Tok::KWWhile,
        "int literal" => Tok::Int(<(i128, lexer::IntType)>),
        "float literal" => Tok::Float(<(f64, lexer::FloatType)>),
        "string literal" => Tok::String(<Box<[u8]>>),
        "char literal" => Tok::Char(<u8>),
        "id" => Tok::Id(<&'input str>),
        "type name" => Tok::TypeName(<&'input str>),
        "..." => Tok::Ellipsis,
        ">>=" => Tok::RightAssign,
        "<<=" => Tok::LeftAssign,
        "+=" => Tok::AddAssign,
        "-=" => Tok::SubAssign,
        "*=" => Tok::MulAssign,
        "/=" => Tok::DivAssign,
        "%=" => Tok::ModAssign,
        "&=" => Tok::AndAssign,
        "^=" => Tok::XorAssign,
        "|=" => Tok::OrAssign,
        "=" => Tok::Assign,
        ">>" => Tok::RightSh,
        "<<" => Tok::LeftSh,
        "++" => Tok::Inc,
        "--" => Tok::Dec,
        "->" => Tok::Arrow,
        "&&" => Tok::LAnd,
        "||" => Tok::LOr,
        "<" => Tok::Lt,
        "<=" => Tok::Lte,
        ">" => Tok::Gt,
        ">=" => Tok::Gte,
        "==" => Tok::Eq,
        "!=" => Tok::Neq,
        ";" => Tok::Semicolon,
        "[" => Tok::BrackOpen,
        "]" => Tok::BrackClose,
        "{" => Tok::BraceOpen,
        "}" => Tok::BraceClose,
        "(" => Tok::ParOpen,
        ")" => Tok::ParClose,
        "," => Tok::Comma,
        ":" => Tok::Colon,
        "." => Tok::Dot,
        "!" => Tok::LNot,
        "~" => Tok::BNot,
        "-" => Tok::Sub,
        "+" => Tok::Add,
        "*" => Tok::Mul,
        "/" => Tok::Div,
        "%" => Tok::Mod,
        "^" => Tok::Xor,
        "|" => Tok::BOr,
        "&" => Tok::BAnd,
        "?" => Tok::Qmark,
        "eof" => Tok::EOF,
    }
}
